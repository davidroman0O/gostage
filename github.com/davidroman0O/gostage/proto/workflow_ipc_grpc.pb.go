// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/workflow_ipc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkflowIPC_InitializeWorkflow_FullMethodName        = "/gostage.WorkflowIPC/InitializeWorkflow"
	WorkflowIPC_RequestWorkflowDefinition_FullMethodName = "/gostage.WorkflowIPC/RequestWorkflowDefinition"
	WorkflowIPC_ChildReady_FullMethodName                = "/gostage.WorkflowIPC/ChildReady"
	WorkflowIPC_SendMessage_FullMethodName               = "/gostage.WorkflowIPC/SendMessage"
	WorkflowIPC_StreamMessages_FullMethodName            = "/gostage.WorkflowIPC/StreamMessages"
	WorkflowIPC_BidirectionalStream_FullMethodName       = "/gostage.WorkflowIPC/BidirectionalStream"
)

// WorkflowIPCClient is the client API for WorkflowIPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WorkflowIPC service defines the communication between parent and child processes
type WorkflowIPCClient interface {
	// Initialize workflow - sends the workflow definition via gRPC
	InitializeWorkflow(ctx context.Context, in *WorkflowDefinition, opts ...grpc.CallOption) (*WorkflowAck, error)
	// Child requests workflow definition from parent (new pull model)
	RequestWorkflowDefinition(ctx context.Context, in *ReadySignal, opts ...grpc.CallOption) (*WorkflowDefinition, error)
	// Child signals it's ready to receive workflow definitions
	ChildReady(ctx context.Context, in *ReadySignal, opts ...grpc.CallOption) (*MessageAck, error)
	// Send a single message from child to parent
	SendMessage(ctx context.Context, in *IPCMessage, opts ...grpc.CallOption) (*MessageAck, error)
	// Stream messages for high-frequency communication
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IPCMessage, MessageAck], error)
	// Bidirectional streaming for real-time communication
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IPCMessage, IPCMessage], error)
}

type workflowIPCClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowIPCClient(cc grpc.ClientConnInterface) WorkflowIPCClient {
	return &workflowIPCClient{cc}
}

func (c *workflowIPCClient) InitializeWorkflow(ctx context.Context, in *WorkflowDefinition, opts ...grpc.CallOption) (*WorkflowAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowAck)
	err := c.cc.Invoke(ctx, WorkflowIPC_InitializeWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowIPCClient) RequestWorkflowDefinition(ctx context.Context, in *ReadySignal, opts ...grpc.CallOption) (*WorkflowDefinition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowDefinition)
	err := c.cc.Invoke(ctx, WorkflowIPC_RequestWorkflowDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowIPCClient) ChildReady(ctx context.Context, in *ReadySignal, opts ...grpc.CallOption) (*MessageAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageAck)
	err := c.cc.Invoke(ctx, WorkflowIPC_ChildReady_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowIPCClient) SendMessage(ctx context.Context, in *IPCMessage, opts ...grpc.CallOption) (*MessageAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageAck)
	err := c.cc.Invoke(ctx, WorkflowIPC_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowIPCClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IPCMessage, MessageAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WorkflowIPC_ServiceDesc.Streams[0], WorkflowIPC_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IPCMessage, MessageAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorkflowIPC_StreamMessagesClient = grpc.BidiStreamingClient[IPCMessage, MessageAck]

func (c *workflowIPCClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IPCMessage, IPCMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WorkflowIPC_ServiceDesc.Streams[1], WorkflowIPC_BidirectionalStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IPCMessage, IPCMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorkflowIPC_BidirectionalStreamClient = grpc.BidiStreamingClient[IPCMessage, IPCMessage]

// WorkflowIPCServer is the server API for WorkflowIPC service.
// All implementations must embed UnimplementedWorkflowIPCServer
// for forward compatibility.
//
// WorkflowIPC service defines the communication between parent and child processes
type WorkflowIPCServer interface {
	// Initialize workflow - sends the workflow definition via gRPC
	InitializeWorkflow(context.Context, *WorkflowDefinition) (*WorkflowAck, error)
	// Child requests workflow definition from parent (new pull model)
	RequestWorkflowDefinition(context.Context, *ReadySignal) (*WorkflowDefinition, error)
	// Child signals it's ready to receive workflow definitions
	ChildReady(context.Context, *ReadySignal) (*MessageAck, error)
	// Send a single message from child to parent
	SendMessage(context.Context, *IPCMessage) (*MessageAck, error)
	// Stream messages for high-frequency communication
	StreamMessages(grpc.BidiStreamingServer[IPCMessage, MessageAck]) error
	// Bidirectional streaming for real-time communication
	BidirectionalStream(grpc.BidiStreamingServer[IPCMessage, IPCMessage]) error
	mustEmbedUnimplementedWorkflowIPCServer()
}

// UnimplementedWorkflowIPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkflowIPCServer struct{}

func (UnimplementedWorkflowIPCServer) InitializeWorkflow(context.Context, *WorkflowDefinition) (*WorkflowAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeWorkflow not implemented")
}
func (UnimplementedWorkflowIPCServer) RequestWorkflowDefinition(context.Context, *ReadySignal) (*WorkflowDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWorkflowDefinition not implemented")
}
func (UnimplementedWorkflowIPCServer) ChildReady(context.Context, *ReadySignal) (*MessageAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChildReady not implemented")
}
func (UnimplementedWorkflowIPCServer) SendMessage(context.Context, *IPCMessage) (*MessageAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedWorkflowIPCServer) StreamMessages(grpc.BidiStreamingServer[IPCMessage, MessageAck]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedWorkflowIPCServer) BidirectionalStream(grpc.BidiStreamingServer[IPCMessage, IPCMessage]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedWorkflowIPCServer) mustEmbedUnimplementedWorkflowIPCServer() {}
func (UnimplementedWorkflowIPCServer) testEmbeddedByValue()                     {}

// UnsafeWorkflowIPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowIPCServer will
// result in compilation errors.
type UnsafeWorkflowIPCServer interface {
	mustEmbedUnimplementedWorkflowIPCServer()
}

func RegisterWorkflowIPCServer(s grpc.ServiceRegistrar, srv WorkflowIPCServer) {
	// If the following call pancis, it indicates UnimplementedWorkflowIPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkflowIPC_ServiceDesc, srv)
}

func _WorkflowIPC_InitializeWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowIPCServer).InitializeWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowIPC_InitializeWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowIPCServer).InitializeWorkflow(ctx, req.(*WorkflowDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowIPC_RequestWorkflowDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadySignal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowIPCServer).RequestWorkflowDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowIPC_RequestWorkflowDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowIPCServer).RequestWorkflowDefinition(ctx, req.(*ReadySignal))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowIPC_ChildReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadySignal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowIPCServer).ChildReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowIPC_ChildReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowIPCServer).ChildReady(ctx, req.(*ReadySignal))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowIPC_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowIPCServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowIPC_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowIPCServer).SendMessage(ctx, req.(*IPCMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowIPC_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkflowIPCServer).StreamMessages(&grpc.GenericServerStream[IPCMessage, MessageAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorkflowIPC_StreamMessagesServer = grpc.BidiStreamingServer[IPCMessage, MessageAck]

func _WorkflowIPC_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkflowIPCServer).BidirectionalStream(&grpc.GenericServerStream[IPCMessage, IPCMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorkflowIPC_BidirectionalStreamServer = grpc.BidiStreamingServer[IPCMessage, IPCMessage]

// WorkflowIPC_ServiceDesc is the grpc.ServiceDesc for WorkflowIPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowIPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gostage.WorkflowIPC",
	HandlerType: (*WorkflowIPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitializeWorkflow",
			Handler:    _WorkflowIPC_InitializeWorkflow_Handler,
		},
		{
			MethodName: "RequestWorkflowDefinition",
			Handler:    _WorkflowIPC_RequestWorkflowDefinition_Handler,
		},
		{
			MethodName: "ChildReady",
			Handler:    _WorkflowIPC_ChildReady_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _WorkflowIPC_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _WorkflowIPC_StreamMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _WorkflowIPC_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/workflow_ipc.proto",
}
